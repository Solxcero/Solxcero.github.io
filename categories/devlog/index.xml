<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DevLog on 漸入佳境</title>
    <link>/categories/devlog/</link>
    <description>Recent content in DevLog on 漸入佳境</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Nov 2024 11:11:47 +0900</lastBuildDate>
    <atom:link href="/categories/devlog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>선형회귀와 스케일링</title>
      <link>/post/linearmodelandscale/</link>
      <pubDate>Wed, 20 Nov 2024 11:11:47 +0900</pubDate>
      <guid>/post/linearmodelandscale/</guid>
      <description>업무 외 지시는 부당지시 아닌가여? 근데 흥미로워 바빠 죽겠던 어느날, 상사가 코드를 좀 봐줄 수 있냐고 부탁을해서 당연히 업무와 관련된 건줄 알고 그러겠다 했다. 근데 내용을 받아보니, 업무가 아닌 본인이 수강하고 있는 강의의 과제였던 것이다&amp;hellip;&#xA;상사의 궁금사항은 이러했다.&#xA;선형회귀모델을 만들었는데, 로우데이터, 정규화 데이터, 표준화 데이터의 MSE 값이 모두 동일하게(완벽히 동일은 아니고 소수점 7자리 까지 동일함) 나온다는 것이었다. 데이터 스케일링을 하면 이상치 값들이 정제되면서 모델의 성능이 개선되어야 하는것이 아니냐? 라는게 상사의 질문.</description>
    </item>
    <item>
      <title>CallBack</title>
      <link>/post/callback/</link>
      <pubDate>Sat, 09 Nov 2024 00:17:43 +0900</pubDate>
      <guid>/post/callback/</guid>
      <description>흐어 요새 연구과제 때매 정신이 없다&amp;hellip; 퇴근하면 방전된 상태로 집에 온다 ㅠㅠ 빨리 끝내버리고 싶다 흐규 넘 힘들어 ㅠ&#xA;CallBack 이 필요했던 이유 현재 개발하고 있는 시스템의 구성을 간략히 말하면,&#xA;외부 서버와 통신하는 Socket 인터페이스와 DB 인터페이스가 있다.&#xA;DB 인터페이스의 경우 실시간으로 1분 마다 데이터를 조회 후 연산 결과를 다시 DB에 저장한다.&#xA;Socket 인터페이스는 1초 마다 요청을 보내고 상대 서버에서 메세지가 날라오면 해당 메세지를 처리하여 별도의 연산 프로세스를 수행한 후 결과를 DB에 저장함과 동시에 다시 상대 서버에 메세지를 보낸다.</description>
    </item>
    <item>
      <title>드디어 @classmethod를 써본다</title>
      <link>/post/classmethod/</link>
      <pubDate>Fri, 01 Nov 2024 10:45:44 +0900</pubDate>
      <guid>/post/classmethod/</guid>
      <description>배운 것을 실제로 내가 하고자하는 일에 적용했을 때의 쾌감이란&#xA;@classmethod는 하나의 객체 내에서만 사용되는 것이 아니라 해당 클래스로 생성된 인스턴스 전체가 공유하는 함수라고 배웠었다.&#xA;물론 간단한 실습은 했었지만 실제로 언제 사용하게 될지 궁금했었는데, 이번에 연구과제 프로젝트를 수행하면서 드디어 써봤다 우히히힣ㅎㅎ&#xA;왜 쓰게 됐냐면,&#xA;화력발전소에는 A~F 까지 총 6대의 미분기가 존재한다.&#xA;그래서 당연히 미분기 Class를 만들고, 6개의 객체를 생성해서 각 미분기에 부여된 id 값으로 테이블에서 조회 후 계산 결과를 다시 테이블에 저장하고 있었다.</description>
    </item>
    <item>
      <title>IF문의 오버헤드</title>
      <link>/post/ifoverhead/</link>
      <pubDate>Sat, 06 Jul 2024 22:00:55 +0900</pubDate>
      <guid>/post/ifoverhead/</guid>
      <description>백준 BOJ거리 문제를 풀다가 BOJ 거리 문제는 DP 알고리즘 문제로 B,O,J 블록을 순서대로 점프하면서 최소한의 에너지로 종료지점에 도착해야하는 문제이다. 문제링크&#xA;아래는 내가 짠 코드이다.&#xA;import sys input = sys.stdin.readline N = int(input()) blocks = str(input().strip()) jump_order = {&amp;#39;B&amp;#39;:&amp;#39;O&amp;#39;,&amp;#39;O&amp;#39;:&amp;#39;J&amp;#39;,&amp;#39;J&amp;#39;:&amp;#39;B&amp;#39;} max_energy = 999*999 + 1 # 소요된 에너지를 저장 -&amp;gt; 최솟값 업데이트를 위해 최댓값으로 저장 dp = [max_energy] * N dp[0] = 0 # 처음 위치에서 에너지 0 -&amp;gt; 즉, dp[i] 는 i칸에 가기 위한 에너지의 최솟값 for i in range(N): if dp[i] == max_energy: continue for j in range(i+1,N): if blocks[j] == jump_order[blocks[i]]: dp[j] = min(dp[j],(j-i)*(j-i)+dp[i]) # print(dp) print(dp[-1] if dp[-1] !</description>
    </item>
  </channel>
</rss>
